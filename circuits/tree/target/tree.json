{"noir_version":"1.0.0-beta.9+6abff2f16e1c1314ba30708d1cf032a536de3d19","hash":"18079297952245532269","abi":{"parameters":[{"name":"leaf","type":{"kind":"field"},"visibility":"private"},{"name":"path","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"},{"name":"selector","type":{"kind":"array","length":2,"type":{"kind":"boolean"}},"visibility":"private"},{"name":"root","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{"13961548130564322735":{"error_kind":"string","string":"Merkle inclusion failed"}}},"bytecode":"H4sIAAAAAAAA/9VVS47CMAx1Shk+M1DmyzXiJqHJbq4y1ZSTsecMXIAjIVKRSCZigagr0SdZdqPW9fMvAi5YeymCLbyMEk3tPGgg+jdoJTdaN1XZoMI/WbraGqlNvbFo0VjzX1qlGqtt5WpXSYdaNbg1Tm3lBUD+w+n3i/iSHXGLt+wGFD3x/mbmHZEz8+fk/MIYF2Pf4FBqIRhrMelphp91LrjndzqQOGePx1mmB21sH6Sv2+d2pk/BnhB7SuxZsON3cy+vXt68LBJ/wJdXzOD6TuTK6Q/0e2d1jS8POeb2u4Zh7Mk5I+clY1yMfYNDqUXGWIuipxl+prm4tWPbHoy7tID7duzKy3vw9UnOI7Kkzl1zMGbsmRVzPiP3MeEvQg5GcH1HpO9ELIPem+NuUR8OkOAMhm9yJ7ANAAA=","debug_symbols":"nZRNbsMgEIXvwtoLZsxvr1JVEXFIhISwRexKVZS7FwdIkwVW5dWzGX9Pb2DMjZzscbkcXDiPV/LxeSPH6Lx3l4MfBzO7MaTV270j9fUwR2vTEnmpJ2oy0YaZfITF+458G788PrpOJjx0NjFVaUdsOCVNhmfn7fp07/5o2kZRyQKjVk+c/5vvgRW+R9jDC115KXbwjNb8DHWLZ21eY8EBeQvnG/F55Rm8xJdvvNjYflS1f+wpthxk2wFAPFsAxfdkkCBqBtnTloPeyCBlXzNI3ewCNs5RM14cNFd7DIDicx+o4Hu60LSeBWhsdrE1jEzVaRD4Nk1f6c0MLr79/gTXsetIn4Vl4VlEFplFZdFZgBaFosUIihOsVuy+Bo3OHL0tl815CcPL3TP/TLVSb6cpjoM9LdGuQR+1FP0X","file_map":{"50":{"source":"use poseidon::poseidon2::Poseidon2;\n\nfn hash_pair(left: Field, right: Field) -> Field {\n    Poseidon2::hash([left, right], 2)\n}\n\nfn main(leaf: Field, path: [Field; 2], selector: [bool; 2], root: pub Field) {\n    let mut digest = leaf;\n\n    for i in 0..2 {\n        let (left, right) = if selector[i] {\n            (path[i], digest)\n        } else {\n            (digest, path[i])\n\n        };\n        digest = hash_pair(left, right);\n    }\n    assert(digest == root, \"Merkle inclusion failed\");\n}\n\n#[test]\nfn should_verify_merkle_inclusion() {\n    let leaf = 0x0b6423c65de8971f0643ab09e384b6009ccf91afc59eb82b3f762d3b068f3be6;\n    let path: [Field; 2] = [\n        0x2c89cbf002f98b27bed8c22279d920ec121130909ccb798b59e775f567f2eef6,\n        0x232cffccaefe9c394f4aada19e5b0599b85de274e62074a686431b608c468c94,\n    ];\n    let selector: [bool; 2] = [true, true];\n    let root = 0x0a75936c9198aa238464d75b9f441788683d16a315c428c60160c24566d010a9;\n\n    main(leaf, path, selector, root);\n}\n","path":"/Users/francoperez/repos/proyectos-lokos/aztec/noir-benchmark-cli/circuits/tree/src/main.nr"},"57":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"}},"names":["main"],"brillig_names":[]}